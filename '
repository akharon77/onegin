#include "iostr.h"
#include <string.h>
#include <stdlib.h>
#include <sys/stat.h>
#include "colors.h"

OPTION EXEC_OPTIONS[] = 
    {
        {"--direct",  "-d", DIRECT_OPTION,  "in direct order" },
        {"--reverse", "-r", REVERSE_OPTION, "in reverse order"},
        {"--file",    "-f", FILE_OPTION,    "from file"       },
        {"--help",    "-h", HELP_OPTION,    "show help"       }
    };

bool getOptions(const int argc, const char *argv[], int *optionsInd)
{
    ASSERT(argv != NULL);

    for (int i = 1; i < argc; ++i)
        for (size_t j = 0; j < N_OPTIONS; ++j)
            if (strcmp(EXEC_OPTIONS[j].strFormLong, argv[i])  == 0 ||
                strcmp(EXEC_OPTIONS[j].strFormShort, argv[i]) == 0)
            {
                if (optionsInd[j])
                    return false;

                optionsInd[j] = i;
            }

    return true;
}

char **input(const char *filename, size_t *nlines, char **text)
{
    if (filename == NULL)
    {
        printf(RED "Wrong filename\n" NORMAL);
        *nlines = 0;
        return NULL;
    }

    int fd = open(filename, O_RDONLY, 0);
    if (fd == -1)
    {
        printf(RED "No file\n" NORMAL);
        *nlines = 0;
        return NULL;
    }

    int fd = fileno(fstream);

    struct stat fileStatBuf;
    if (fstat(fd, &fileStatBuf) != 0)
    {
        printf(RED "File stats reading error\n" NORMAL);
        return 0;
    }

    size_t fileSize = (size_t) fileStatBuf.st_size;
    char *fileCont = (char*) calloc(fileSize, sizeof(char));
    *text = fileCont;

    if (fileCont == NULL)
    {
        printf(RED "Memory allocation error\n" NORMAL);
        return 0;
    }

    fread(fileCont, sizeof(char), fileSize, fstream);
    if (ferror(fstream))
    {
        printf(RED "File reading error\n" NORMAL);
        return 0;
    }

    size_t nRawLines = 0;
    for (size_t i = 0; i < fileSize; ++i)
        if (fileCont[i] == '\n')
        {
            fileCont[i] = '\0';
            ++nRawLines;
        } 

    char **lines = (char**) calloc(nRawLines, sizeof(char*));

    bool isLine = false;
    size_t nResLines = 0;
    for (size_t i = 0; i < fileSize; ++i)
    {
        if (fileCont[i] == '\0')
        {
            isLine = false;
        }
        else if (!isLine)
        {
            isLine = true;
            while (fileCont[i] == ' ' && i < fileSize)
                ++i;
            lines[nResLines] = fileCont + i;
            ++nResLines;
        }
    }

    *nlines = nResLines;
    return lines;
}

void output(size_t nlines, char **lines)
{
    for (unsigned long i = 0; i < nlines; ++i)
        printf("%s\n", lines[i]);
}

void empty(char **lines, char *text)
{
    free(text);
    free(lines);
}

int cmpDirect(const void *a, const void *b)
{
    return strcmp(*((char * const *) a), *((char * const *) b));
}

int cmpReverse(const void *a, const void *b)
{
    return -strcmp(*((char * const *) a), *((char * const *) b));
}
